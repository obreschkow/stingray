OVERVIEW
====================================================================================================================

Stingray is a suite of Fortran routines to produce mock observing cones from semi-analytic models (SAMs).

V0.1  13/03/2018: First release
V0.6  09/10/2018: Various bug fixes
V0.7  26/10/2018: Separated user-module into a two modules for routines and selection function;
                  Added selection by "apparent mass" to reduce the amount of data in the positioning step
                  Added a correction of group positions that were 'wrapped away' from all group members
V0.8  10/12/2018: Fixed bug with galaxy counting in multi-threading mode
V0.9  26/02/2019: Updated HDF5 module for increased flexibility with data type conversions
V0.10 26/03/2019: Better commenting, copy parameter file, instead of rewriting it
V0.11 29/04/2019: Improved cosmology module, general clean up, improved makefile
V0.12 12/09/2019: Bug fixes, developper version of HI-line module added
V0.13 19/09/2019: Emission line maker for HI and CO with many rotation curve models for halos, disks and bulges
v0.14 28/10/2019: Added pre_selection function to module_user_selections
v0.15 04/02/2020: New entry "make_groups" in the parameter file, id_galaxy_sky changed and id_galaxy_sky_smart added,
                  Included test data (shark subvolume L40_N512/199/0/)
v0.16 25/02/2020: Input argument check fixed
v0.17 01/03/2020: Changed id_galaxy_sky in shark user module to better cope with Viperfish
v0.20 20/04/2020: Significant restructuring of the code, inclusion of shared modules
v0.21 21/04/2020: Use of system-independent pseudo-random number generator
v0.22 22/04/2020: Completely revised layout of module "module_user_selection"; only one function per survey needed

Copyright Danail Obreschkow (danail.obreschkow@icrar.org)


GETTING STARTED
====================================================================================================================

1) Installations:
   a) make sure gfortran is installed (code tested for GNU Fortran 9.3.0)
   b) make sure that HDF5 is installed (version 1.10.1 or higher)

2) In terminal, download Stingray
   > git clone https://github.com/obreschkow/stingray
   
3) Go to stingray directory
   > cd stingray
   
4) Clean potential previous compilations
   > make clean
   
5) If needed, specify the HDF compiler flags for your system by adding a new block to the makefile
   ifeq ($(system),[your system name])
      hdfflags = [your HDF flats]
   endif
   
6) Compile the code by typing
   > make system=[your system name]
   NB: depending on the system, it might be necessary to load fortran and hdf5 packages,
       e.g. using a command like
       > module load gfortran/6.3.0 hdf5/1.10.2
   NB: to activate all debugging flags use
       > make mode=dev
       
7) Check stingray version
   > ./stingray -v
       
7) Try to run the test-cone using the
   > ./stingray
   On most MacOS systems, stingray will be able to automatically find the path of the parameterfile
   and the small dataset included for testing. It will produce a small mocksky in the subdirectory 'test'.
   The sky should contain 336 galaxies in 278 groups. If the parameterfile and/or paths cannot be found
   automatically, follow steps (8) and (9).
      
8) Edit the parameter file parameter.txt, especially the input and output paths
   
9) Produce mock observing cone
   > ./stingray [-parameterfile .../parameter.txt]
   
9) Check files written into output directory
   
10) Optionally, visualise the cone in R


QUICK START ON ICRAR-HYADES
====================================================================================================================

# install and compile stingray in your home directory
cd ~
rm -rf stingray/ # remove previous surfsuite directory
git clone https://github.com/obreschkow/stingray # install updated version
cd stingray # change to surfsuite directory
module load gfortran/6.3.0 hdf5/1.10.2 # load required modules
make system=hyades # compile code
./stingray version # check version

# run test mock
./stingray


ARGUMENTS
====================================================================================================================

Generally, Stingray is called as
> ./stingray [-option argument] [-option argument] ...

Optional arguments:

-parameterfile (default parameters.txt): path+filename of parameter-file

-logfile (default none) optional filename of an ascii-file for the screen output

-verbose (default n if logfile given, otherwise y): logical flag (y or n) specifying whether the log should be
 displayed on the screen
 
-version: returns the version of Stingray
